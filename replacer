ROOT_FOLDER="."

# Dynamically get module folders using find
MODULE_FOLDERS=($(find "$ROOT_FOLDER" -type d -path "*/main/res/values"))

# Randomly select a module folder
RANDOM_MODULE=${MODULE_FOLDERS[$RANDOM % ${#MODULE_FOLDERS[@]}]}

# Get a list of Kotlin files in the selected module
KOTLIN_FILES=("$RANDOM_MODULE"/strings.xml)

# Check if there are Kotlin files in the selected module
if [ ${#KOTLIN_FILES[@]} -eq 0 ]; then
  echo "No Kotlin files found in $RANDOM_MODULE. Exiting."
  exit 1
fi

# Randomly select a Kotlin file
RANDOM_FILE=${KOTLIN_FILES[$RANDOM % ${#KOTLIN_FILES[@]}]}

# Generate a random update (you can modify this part according to your needs)
RANDOM_UPDATE=$(date +%s%N | sha256sum | base64 | head -c 32)
RANDOM_FUNCTION="<string name=\"$RANDOM_UPDATE\">$RANDOM_UPDATE</string>"
# Update the selected file

echo $RANDOM_FILE
echo $RANDOM_FUNCTION
# Using sed to insert the new string before the tag </resources>

# Read the content of the file
file_content=$(<"$RANDOM_FILE")

# Find the position of </resources>
position=$(echo "$file_content" | awk '/<\/resources>/ {print FNR}')

# Insert the new string before </resources>
new_content=$(echo "$file_content" | awk -v pos="$position" -v str="$RANDOM_FUNCTION" 'NR == pos {print str} {print}')

# Write the modified content back to the file
echo "$new_content" > "$RANDOM_FILE"

escaped_random_function=$(printf '%s\n' "$RANDOM_FUNCTION" | sed -e 's/[\/&]/\\&/g')

# Using sed to insert the new string before the tag </resources>
#sed -i "/<\/resources>/i ${escaped_random_function}" "$RANDOM_FILE"

#sed -i '/<\/resources>/i '"$RANDOM_FUNCTION"'' "$RANDOM_FILE"
echo "Updating $RANDOM_FILE with $RANDOM_FUNCTION"


echo "Update complete."