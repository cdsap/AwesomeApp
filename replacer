ROOT_FOLDER="."

# Dynamically get all possible strings.xml files
ALL_KOTLIN_FILES=($(find "$ROOT_FOLDER" -type f -name "strings.xml"))

# Determine the total number of strings.xml files available
TOTAL_FILES_AVAILABLE=${#ALL_KOTLIN_FILES[@]}

# Determine the number of Kotlin files to update
NUM_FILES_TO_UPDATE=$((RANDOM % 200 + 1))

# Limit NUM_FILES_TO_UPDATE to the total available files to avoid trying to update more files than exist
if [ "$NUM_FILES_TO_UPDATE" -gt "$TOTAL_FILES_AVAILABLE" ]; then
  NUM_FILES_TO_UPDATE=$TOTAL_FILES_AVAILABLE
fi

echo "Number of files to update: $NUM_FILES_TO_UPDATE"

# Shuffle the list of all Kotlin files and pick the first N files
SELECTED_FILES=($(shuf -e "${ALL_KOTLIN_FILES[@]}" -n $NUM_FILES_TO_UPDATE))

# Loop to update N selected Kotlin files
for RANDOM_FILE in "${SELECTED_FILES[@]}"
do
    # Generate a random update
    RANDOM_UPDATE=$(date +%s%N | sha256sum | base64 | head -c 32)
    RANDOM_FUNCTION="<string name=\"$RANDOM_UPDATE\">$RANDOM_UPDATE</string>"

    echo "Updating $RANDOM_FILE with $RANDOM_FUNCTION"

    # Read the content of the file
    file_content=$(<"$RANDOM_FILE")

    # Find the position of </resources>
    position=$(echo "$file_content" | grep -n '</resources>' | cut -d: -f1)

    # Insert the new string before </resources> using awk
    new_content=$(echo "$file_content" | awk -v pos="$position" -v str="$RANDOM_FUNCTION" 'NR == pos {print str} 1')

    # Write the modified content back to the file
    echo "$new_content" > "$RANDOM_FILE"
done

echo "Update complete."
